Binary Search (Recursive)

Given an integer sorted array (sorted in increasing order) and an element x, find the x in given array using binary search. Return the index of x.
Return -1 if x is not present in the given array.
Note : If given array size is even, take first mid.
Input format :

Line 1 : Array size

Line 2 : Array elements (separated by space)

Line 3 : x (element to be searched)

Sample Input :
6
2 3 4 5 6 8 
5 
Sample Output:
3 

////////////////////////////Solution//////////////////////

// input - input array
// size - length of input array
// element - value to be searched

int helper(int *a,int s,int e,int k){
    if(s>=e){
        return -1;
    }
    int mid=(s+e)/2;
    if(a[mid]==k){
        return mid;
    }
    else if(a[mid]>k){
        int ans=helper(a,s,mid-1,k);
        return ans;
    }
    else if(a[mid]<k){
        int ans=helper(a,mid+1,e,k);
        return ans;
    }
}

int binarySearch(int a[], int n, int element) {
    // Write your code here
    
    return helper(a,0,n-1,element);
    
   // if(n==0){
   //     return -1;
   // }
   //  int mid=(n-1)/2;
   //  if(a[mid]==element){	
   //      return mid;
   //  }
   //  else if(a[mid]>element){
   //      int ans=binarySearch(a,mid-1,element);
   //      return ans;
   //  }
   //  else if(a[mid]<element){
   //      int ans=binarySearch(a+mid+1,n-mid,element);
   //      if(ans==-1){
   //          return ans;
   //      }
   //      else {
   //          return ans+mid+1;
   //      } 
   //  }
}
