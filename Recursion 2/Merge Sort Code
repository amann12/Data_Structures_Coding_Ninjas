Merge Sort Code

Sort an array A using Merge Sort.
Change in the input array itself. So no need to return or print anything.
Input format :
Line 1 : Integer n i.e. Array size
Line 2 : Array elements (separated by space)
Output format :
Array elements in increasing order (separated by space)
Constraints :
1 <= n <= 10^3
Sample Input 1 :
6 
2 6 8 5 4 3
Sample Output 1 :
2 3 4 5 6 8
Sample Input 2 :
5
2 1 5 2 3
Sample Output 2 :
1 2 2 3 5 

////////////////////////////Solution///////////////////////////////

void merge(int a[],int s,int mid,int e){
//     int extra[10000];
//     int i=s,j=mid+1,k=0;
    
//     while(i<=mid && j<=e){
//         if(a[i]<a[j]){
//             extra[k]=a[i];
//             i++;
//         }
//         else{
//             extra[k]=a[j];
//             j++;
//         }
//         k++;
//     }
    
//     while(i<=mid){
//         extra[k]=a[i];
//         i++;k++;
//     }
    
//      while(j<=e){
//         extra[k]=a[j];
//         j++;k++;
//     }
//     int p=0;
//     for(int i=s;i<=e;i++){
//         a[i]=extra[p++];
//     }
    
    
    

    int n1=mid-s+1;
    int n2=e-mid  	;
    int left[n1],right[n2];
    for(int i=0;i<n1;i++){
        left[i]=a[s+i];
    }
    for(int i=0;i<n2;i++){
        right[i]=a[mid+1+i];
    }
    int i=0,j=0;
    int count=s;
    while(i<n1 && j<n2){
        if(left[i]<right[j]){
            a[count]=left[i];
            i++;
        }
        else{
            a[count]=right[j];
            j++;
        }
        count++;
    }
    while(i<n1){
        a[count++]=left[i++];
    }
     while(j<n2){
        a[count++]=right[j++];
    }
    
    
    
    
    
}

void helper(int *a,int s,int e){
    if(s>=e){
        return;
    }
    int mid=(s+e)/2;
    helper(a,s,mid);
    helper(a,mid+1,e);
    merge(a,s,mid,e);
}


void mergeSort(int a[], int size){
	// Write your code here
        
	helper(a,0,size-1);    
    
}
